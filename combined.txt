# Project Directory Structure
./
    popup.js
    combined.txt
    background.js
    popup.html
    cat.py
    .gitignore
    manifest.json
    content.js
    stash-it.zip
    images/
        icon16.png
        icon48.png
        icon128.png
    styles/
        popup.css

# End of Directory Structure

# Start of styles/popup.css
/* Updated base styles */
body {
  width: 320px;
  font-family: 'Segoe UI', Arial, sans-serif;
  color: #202124;
  margin: 0;
  padding: 0;
  background-color: transparent;
  border-radius: 12px; /* Add this line to make the outer container have rounded corners */
  overflow: hidden; /* Add this to ensure content respects the rounded corners */
}

/* Card-like container */
.container {
  position: relative;
  background-color: white;
  border-radius: 12px !important; /* Force rounded corners */
  -webkit-border-radius: 12px; /* Vendor prefix for older Chrome */
  padding: 16px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  overflow: hidden;
  /* Force hardware acceleration to fix potential rendering issues */
  transform: translateZ(0);
  -webkit-transform: translateZ(0);
}

/* Close button in the top right */
.close-btn {
  position: absolute;
  top: 8px;
  right: 8px;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background-color: #f1f1f1;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 18px;
  line-height: 1;
  color: #5f6368;
  border: none;
  transition: all 0.2s;
  font-family: Arial, sans-serif;
}

.close-btn:hover {
  background-color: #e0e0e0;
  color: #202124;
}

/* Title styling */
.title {
  font-size: 18px;
  font-weight: 500;
  color: #202124;
  margin-top: 0;
  margin-bottom: 16px;
  text-align: center;
}

/* Form group improvements */
.form-group {
  margin-bottom: 14px;
}

label {
  display: block;
  margin-bottom: 6px;
  color: #5f6368;
  font-size: 13px;
  font-weight: 500;
}

input[type="date"],
input[type="time"],
input[type="text"] {
  width: 100%;
  padding: 10px;
  border: 1px solid #dadce0;
  border-radius: 4px;
  margin-bottom: 0;
  box-sizing: border-box;
  font-size: 14px;
  transition: border-color 0.2s;
}

input:focus {
  outline: none;
  border-color: #4285f4;
  box-shadow: 0 0 0 2px rgba(66, 133, 244, 0.2);
}

/* Button improvements */
.button {
  width: 100%;
  padding: 10px 16px;
  background-color: #4285f4;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  margin-bottom: 12px;
  transition: background-color 0.2s;
}

.button:hover {
  background-color: #3367d6;
  box-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.button:active {
  background-color: #2850a7;
}

.button:disabled {
  background-color: #c2c2c2;
  cursor: not-allowed;
}

.open-button {
  width: 100%;
  padding: 10px 16px;
  background-color: #34a853;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  display: none;
  margin-top: 0;
  transition: background-color 0.2s;
}

.open-button:hover {
  background-color: #2e7d32;
  box-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.open-button:active {
  background-color: #1e5e20;
}

/* Button container for multiple buttons */
.button-container {
  display: flex;
  gap: 8px;
}

.button-container .button,
.button-container .open-button {
  flex: 1;
  margin-bottom: 0;
}

/* Status message improvements */
.status {
  margin-top: 12px;
  padding: 10px 12px;
  border-radius: 4px;
  display: none;
  font-size: 13px;
  text-align: center;
}

.success {
  background-color: #e6f4ea;
  color: #137333;
  border-left: 4px solid #34a853;
}

.error {
  background-color: #fce8e6;
  color: #c5221f;
  border-left: 4px solid #ea4335;
}

/* Toggle improvement */
.default-toggle {
  margin-top: 12px;
  font-size: 13px;
  color: #5f6368;
  display: flex;
  align-items: center;
}

.default-toggle input[type="checkbox"] {
  margin-right: 6px;
}

/* Footer with branding */
.footer {
  margin-top: 16px;
  text-align: center;
  font-size: 12px;
  color: #ccc; /* Lighter text for dark background */
}

/* Footer link styling */
.footer a {
  color: #4285f4;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s;
}

.footer a:hover {
  color: #64a2ff;
  text-decoration: underline;
}

/* Loading indicator */
.spinner {
  display: inline-block;
  width: 16px;
  height: 16px;
  border: 2px solid rgba(255,255,255,0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease-in-out infinite;
  margin-right: 8px;
  vertical-align: middle;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}
# End of styles/popup.css

# Start of background.js
// Handle OAuth token management
let accessToken = null;

// Listen for messages from popup or content script
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "stashFile") {
    handleStashFile(request.fileUrl, request.eventDateTime, request.eventName)
      .then(result => {
        console.log('Calendar event created successfully:', result);
        sendResponse({ success: true, message: "Event created!", details: result });
      })
      .catch(error => {
        console.error('Error creating calendar event:', error);
        sendResponse({ success: false, message: error.message });
      });
    return true; // Will respond asynchronously
  }
});

/**
 * Handles creating a calendar event for the stashed file
 * @param {string} fileUrl - URL to stash
 * @param {string} eventDateTime - ISO date string for the event
 * @param {string} eventName - Name for the calendar event
 * @returns {Promise} - Calendar event result
 */
async function handleStashFile(fileUrl, eventDateTime, eventName) {
  try {
    // Ensure we have a valid token
    accessToken = await getAuthToken();
    
    // Create calendar event
    const event = await createCalendarEvent({
      summary: eventName,
      description: `Review webpage: ${fileUrl}`,
      startDateTime: eventDateTime,
      duration: 30 // minutes
    });
    
    // Show notification
    if (event && event.htmlLink) {
      showNotification(
        'Calendar Event Created',
        `"${event.summary}" has been added to your calendar`,
        event.id,
        event.htmlLink
      );
    }
    
    return event;
  } catch (error) {
    console.error('Error in handleStashFile:', error);
    throw error;
  }
}

/**
 * Gets an OAuth token for Google Calendar API
 * @returns {Promise<string>} - Token string
 */
async function getAuthToken() {
  return new Promise((resolve, reject) => {
    chrome.identity.getAuthToken({ interactive: true }, (token) => {
      if (chrome.runtime.lastError) {
        reject(new Error(chrome.runtime.lastError.message));
      } else {
        resolve(token);
      }
    });
  });
}

/**
 * Creates a calendar event
 * @param {Object} eventDetails - Event details
 * @returns {Promise<Object>} - Created event
 */
async function createCalendarEvent({ summary, description, startDateTime, duration }) {
  try {
    const endDateTime = new Date(new Date(startDateTime).getTime() + duration * 60000).toISOString();
    
    const event = {
      summary,
      description,
      start: {
        dateTime: startDateTime,
        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
      },
      end: {
        dateTime: endDateTime,
        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
      },
      reminders: {
        useDefault: false,
        overrides: [
          { method: 'popup', minutes: 10 }
        ]
      }
    };
    
    const response = await fetch(
      'https://www.googleapis.com/calendar/v3/calendars/primary/events',
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(event)
      }
    );
    
    if (!response.ok) {
      const errorData = await response.json();
      
      // User-friendly error messages
      let errorMessage = 'Failed to create calendar event';
      
      if (errorData.error) {
        if (errorData.error.code === 401) {
          errorMessage = 'Authentication error. Please try again.';
        } else if (errorData.error.code === 403) {
          errorMessage = 'Permission denied. Please check your Google Calendar permissions.';
        } else if (errorData.error.message) {
          errorMessage = `Error: ${errorData.error.message}`;
        }
      }
      
      throw new Error(errorMessage);
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error in createCalendarEvent:', error);
    throw error;
  }
}

/**
 * Shows a notification for the created event
 * @param {string} title - Notification title
 * @param {string} message - Notification message
 * @param {string} eventId - Calendar event ID
 * @param {string} eventUrl - Calendar event URL
 */
function showNotification(title, message, eventId, eventUrl) {
  chrome.notifications.create(
    eventId, // Use eventId as notification ID for reference
    {
      type: 'basic',
      iconUrl: 'images/icon128.png',
      title: title,
      message: message,
      buttons: [
        { title: 'Open Event' }
      ],
      priority: 2
    }
  );
  
  // Store the URL for reference when notification is clicked
  chrome.storage.local.set({ [eventId]: eventUrl });
}

// Handle notification clicks
chrome.notifications.onButtonClicked.addListener((notificationId, buttonIndex) => {
  if (buttonIndex === 0) { // "Open Event" button
    openStoredEventUrl(notificationId);
  }
});

// Handle direct notification clicks
chrome.notifications.onClicked.addListener(openStoredEventUrl);

/**
 * Opens the event URL stored for a notification ID
 * @param {string} notificationId - Notification ID
 */
function openStoredEventUrl(notificationId) {
  chrome.storage.local.get(notificationId, (result) => {
    const eventUrl = result[notificationId];
    if (eventUrl) {
      chrome.tabs.create({ url: eventUrl });
    }
  });
}
# End of background.js

# Start of content.js

# End of content.js

# Start of manifest.json
{
    "manifest_version": 3,
    "name": "Stash It",
    "version": "1.1.2",
    "description": "Stash the current tab on your calendar as an event for easy access later",
    "permissions": [
      "identity",
      "tabs",
      "activeTab",
      "storage",
      "notifications"
    ],
    "host_permissions": [
      "https://www.googleapis.com/*"
    ],
    "action": {
      "default_popup": "popup.html",
      "default_icon": {
        "16": "images/icon16.png",
        "48": "images/icon48.png",
        "128": "images/icon128.png"
      }
    },
    "icons": {
      "16": "images/icon16.png",
      "48": "images/icon48.png",
      "128": "images/icon128.png"
    },
    "oauth2": {
      "client_id": "1008378664594-5h46lufh4cn6ujln0fodjiimknjaqkdb.apps.googleusercontent.com",
      "scopes": [
        "https://www.googleapis.com/auth/calendar.events"
      ]
    },
    "background": {
      "service_worker": "background.js"
    }
  }
# End of manifest.json

# Start of popup.html
<!DOCTYPE html>
<html>
<head>
  <title>Stash It</title>
  <link rel="stylesheet" href="styles/popup.css">
</head>
<body>
  <div class="container">
    <button id="closeBtn" class="close-btn">&#10005;</button>
    <h1 class="title">Stash It</h1>
    
    <div class="form-group">
      <label for="eventName">Event Name</label>
      <input type="text" id="eventName" placeholder="Review: Page Title">
    </div>

    <div class="form-group">
      <label for="eventDate">Date</label>
      <input type="date" id="eventDate">
    </div>
    
    <div class="form-group">
      <label for="eventTime">Time</label>
      <input type="time" id="eventTime">
    </div>

    <div class="button-container">
      <button id="stashButton" class="button">
        <span id="spinner" class="spinner" style="display: none;"></span>
        <span id="buttonText">Stash It</span>
      </button>
      <button id="openButton" class="open-button">Open Event</button>
    </div>
    
    <div class="default-toggle">
      <label>
        <input type="checkbox" id="saveAsDefault"> Save time as default
      </label>
    </div>

    <div id="status" class="status"></div>
    
    <div class="footer">
      <a href="https://spark4.tech" id="companyLink" target="_blank">Spark4</a> &copy; 2025
    </div>
  </div>
  
  <script src="popup.js"></script>
</body>
</html>
# End of popup.html

# Start of popup.js
document.addEventListener('DOMContentLoaded', function() {
  // DOM elements
  const stashButton = document.getElementById('stashButton');
  const openButton = document.getElementById('openButton');
  const statusDiv = document.getElementById('status');
  const dateInput = document.getElementById('eventDate');
  const timeInput = document.getElementById('eventTime');
  const eventNameInput = document.getElementById('eventName');
  const saveDefaultCheck = document.getElementById('saveAsDefault');
  const spinner = document.getElementById('spinner');
  const buttonText = document.getElementById('buttonText');
  const closeBtn = document.getElementById('closeBtn');

  // Variable to store the event URL
  let createdEventUrl = '';

  // Set tomorrow's date as default
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setHours(0, 0, 0, 0);
  tomorrow.setDate(today.getDate() + 1);
  
  const tomorrowStr = tomorrow.toISOString().split('T')[0];

  // Initialize popup with saved settings and page title
  initializePopup();

  // Event listeners
  stashButton.addEventListener('click', handleStashButtonClick);
  openButton.addEventListener('click', handleOpenButtonClick);
  closeBtn.addEventListener('click', handleCloseButtonClick);
  document.getElementById('companyLink').addEventListener('click', function(e) {
    e.preventDefault();
    chrome.tabs.create({ url: this.href });
  });

  /**
   * Initializes the popup with saved settings and current tab info
   */
  function initializePopup() {
    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
      const tab = tabs[0];
      const defaultName = `Review: ${tab.title}`;
      eventNameInput.value = defaultName;

      chrome.storage.sync.get({ defaultTime: '08:00' }, function(items) {
        dateInput.value = tomorrowStr;
        timeInput.value = items.defaultTime;
        stashButton.disabled = false;
      });
    });
  }

  /**
   * Handles the stash button click event
   */
  async function handleStashButtonClick() {
    try {
      statusDiv.style.display = 'none';

      // Validate inputs
      if (!dateInput.value || !timeInput.value || !eventNameInput.value.trim()) {
        throw new Error('Please fill in all fields');
      }

      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });

      const dateTimeStr = `${dateInput.value}T${timeInput.value}:00`;
      const eventDateTime = new Date(dateTimeStr);

      if (isNaN(eventDateTime.getTime())) {
        throw new Error('Please select a valid date and time');
      }

      // Save user preferences if checkbox is checked
      if (saveDefaultCheck.checked) {
        chrome.storage.sync.set({ defaultTime: timeInput.value });
      }

      // Show loading state
      setLoadingState(true);

      // Send message to background script
      const response = await chrome.runtime.sendMessage({
        action: 'stashFile',
        fileUrl: tab.url,
        eventDateTime: eventDateTime.toISOString(),
        eventName: eventNameInput.value
      });

      // Handle response
      if (response.success && response.details && response.details.htmlLink) {
        createdEventUrl = response.details.htmlLink;
        openButton.style.display = 'block';

        statusDiv.textContent = 'Calendar event created!';
        statusDiv.className = 'status success';
      } else {
        throw new Error(response.message || 'Failed to create event.');
      }

    } catch (error) {
      statusDiv.textContent = error.message;
      statusDiv.className = 'status error';
      openButton.style.display = 'none';
    } finally {
      statusDiv.style.display = 'block';
      setLoadingState(false);
    }
  }

  /**
   * Sets the loading state of the stash button
   * @param {boolean} isLoading - Whether the button should show loading state
   */
  function setLoadingState(isLoading) {
    stashButton.disabled = isLoading;
    spinner.style.display = isLoading ? 'inline-block' : 'none';
    buttonText.textContent = isLoading ? 'Creating event...' : 'Stash It';
  }

  /**
   * Handles the open button click event
   */
  function handleOpenButtonClick() {
    if (createdEventUrl) {
      chrome.tabs.create({ url: createdEventUrl });
    }
  }

  /**
   * Handles the close button click event
   */
  function handleCloseButtonClick() {
    window.close();
  }
});
# End of popup.js

